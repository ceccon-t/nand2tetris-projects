// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   // Aux variables
   // stage1 (zx, x or zero, yields partialX)
   Mux16(a=x,b=false,sel=zx,out=partialX);
   // !x
   Not16(in=partialX,out=notPartialX);

   // stage2 (nx, x or negatedX, yields finalX)
   Mux16(a=partialX, b=notPartialX, sel=nx, out=finalX);

   // stage3 (zy, y or zero, yields partialY)
   Mux16(a=y, b=false, sel=zy, out=partialY);
   // !y
   Not16(in=partialY,out=notPartialY);

   // stage4 (ny, y or negatedY, yields finalY)
   Mux16(a=partialY, b=notPartialY, sel=ny, out=finalY);

   // x AND y 
   And16(a=finalX,b=finalY,out=xANDy);
   // x PLUS y 
   Add16(a=finalX,b=finalY,out=xPLUSy);

   // stage5 (f, xANDy or xPLUSy, yields partialOut)
   Mux16(a=xANDy,b=xPLUSy,sel=f,out=partialOut);

   // !partialOut 
   Not16(in=partialOut,out=notPartialOut);

   // stage6 (no, partialOut or notPartialOut, yields finalResult)
   Mux16(a=partialOut,b=notPartialOut,sel=no,out=finalResult);

   // status zr
   IsZero16(a=finalResult, out=zr);

   // status ng 
   IsNegative16(a=finalResult,out=ng);

   // out 
   Or16(a=finalResult,b=false,out=out);

}