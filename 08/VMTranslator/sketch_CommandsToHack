---------------------------------
call f n 

//    push return-address
//    push LCL 
//    push ARG 
//    push THIS 
//    push THAT 
//    ARG = SP-n-5
//    LCL = SP 
//    goto f 
//  (return-address)

---------------------------------
function f k

// (f)
//   repeat k times:
//   PUSH 0

---------------------------------
return 

// FRAME = LCL 
// RET = *(FRAME-5)
// *ARG = pop()
// SP = ARG+1
// THAT = *(FRAME-1)
// THIS = *(FRAME-2)
// ARG = *(FRAME-3)
// LCL = *(FRAME-4)
// goto RET

---------------------------------

==============================================

---------------------------------
call f n 

// on CodeWriter: `return_address = generateInternalLabel("RETURN");`

//    push return-address
@{return_address}
D=A
@SP 
AM=M+1
A=A-1 
M=D 

//    push LCL 
@LCL 
D=M 
@SP 
AM=M+1
A=A-1
M=D 

//    push ARG 
@ARG 
D=M 
@SP 
AM=M+1
A=A-1
M=D  

//    push THIS 
@THIS 
D=M 
@SP 
AM=M+1
A=A-1
M=D 

//    push THAT 
@THAT 
D=M 
@SP 
AM=M+1
A=A-1
M=D 

//    ARG = SP-n-5
@SP 
D=M 
@{n}
D=D-A 
@5
D=D-A 
@ARG 
M=D 

//    LCL = SP 
@SP 
D=M 
@LCL 
M=D 

//    goto f 
@{f}
0;JMP 

//  (return-address)
({return_address})

---------------------------------
function f k

// (f)
@{f}

//   repeat k times:
// loop on CodeWriter
//   PUSH 0
@SP 
A=M 
M=0
@SP 
M=M+1

// initialization
@SP 
A=M

// loop
M=0
A=A+1

// finish
D=A 
@SP 
M=D

---------------------------------
return 

// FRAME = LCL 
@LCL 
D=M 
@R13
M=D

// RET = *(FRAME-5)
@5
D=D-A
A=D 
D=M 
@R14
M=D

// *ARG = pop()
@SP 
AM=M-1
D=M 
@ARG 
A=M 
M=D

// SP = ARG+1
@ARG 
D=M+1
@SP 
M=D

// THAT = *(FRAME-1)
@R13 
AM=M-1  
D=M
@THAT 
M=D

// THIS = *(FRAME-2)
@R13 
AM=M-1
D=M
@THIS 
M=D

// ARG = *(FRAME-3)
@R13 
AM=M-1
D=M
@ARG 
M=D

// LCL = *(FRAME-4)
@R13 
AM=M-1
D=M
@LCL
M=D

// goto RET
@R14 
A=M 
0;JMP

---------------------------------
