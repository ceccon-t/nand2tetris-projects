// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int len;
    field int maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let str = Array.new(maxLength+1);
        let len = 0;
        let maxLen = maxLength;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, i, charVal;
        var boolean isNegative;

        let i = 0;
        let value = 0;
        let isNegative = false;

        if ((len > 0) & (str[0] = 45)) {
            let isNegative = true;
            let i = 1;
        }

        while ((i < len) & (str[i] > 47) & (str[i] < 58)) {
            let charVal = str[i] - 48;

            let value = (value*10) + charVal;

            let i = i + 1;
        }

        if (isNegative) {
            let value = -value;
        }

        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var Array numbers;
        var int i, count, base, digit;

        let numbers = Array.new(maxLen);
        let base = 0;

        if (val < 0) {
            let str[0] = 45;
            let val = -val;
            let base = 1;
        }

        let count = 0;

        while (val > 0) {
            let digit = String.mod(val, 10);

            let numbers[count] = digit;

            let count = count + 1;
            let val = val / 10;
        }

        let i = 0;
        while (~(i = count)) {
            let str[count - i - 1 + base] = numbers[i] + 48;

            let i = i + 1;
        }

        let len = count + base;

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function int mod(int a, int b) {
        var int r;
        let r = a / b;
        return a - (r * b);
    }
}
